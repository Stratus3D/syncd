#!/bin/bash
#------------------------------------------------------------
# initd script for running services without start-stop-daemon
# (c) Wolfgang Ziegler, nuppla@zites.net, drunomics GmbH
#------------------------------------------------------------

# Find config file

CONF_FILE=syncd.conf

usage() {
    cat <<EOF
	Syncd is a simple bash script that watches for file changes and rsyncs them
    to a remote machine. It uses inotify to watch for file system changes and
    syncs the whole directory to a remote machine using rsync.

      echo "Usage: $0 {start|stop|restart|status|log|run|show-run-command}"
    Usage: syncd {start|stop|restart|status|run|log|help}

    Commands:
    start                                Starts the syncd daemon so file system
                                         changes trigger rsyncing of the files
    stop                                 Stop the syncd daemon
    restart                              Restart the syncd daemon
    status                               Get the status of the syncd daemon
    run                                  Trigger a sync manually
    log                                  Tail the daemon log
    show-run-command                     Echo the command that will be used to
                                         sync the files
    help                                 Print out this help message
    sample_config                        Print out a sample syncd.conf file
EOF
}

sample_config() {
cat <<EOF
# Syncd config
#
# Variables:
# - SYNCD_CONFIG_DIR: The directory in which the used syncd.conf is located.
# - SCRIPT_DIR: The directory the syncd script has been installed to.

# The directory being watched & synced.
WATCH_DIR=$SYNCD_CONFIG_DIR/your-directory

# Watch-related options
WATCH_EXCLUDE='(\.git|___jb_)'
# Whether to enable verbosity. If enabled, change events are output.
WATCH_VERBOSE=0

# SSH connection settings
SSH_USER=vagrant
SSH_HOST=hostname.local

# Sync options
REMOTE_TARGET_DIR="/var/www"
RSYNC_EXCLUDE='sites/default/files --exclude files'
RSYNC_OPTIONS="-Cra --out-format='[%t]--%n' --include core"

# Syncd files
LOGFILE=".syncd.log"
PIDFILE=".syncd.pid"
EOF
}

error_exit() {
    usage
    exit 1
}

verify_config_file_present() {
    while [ ! -e $CONF_FILE ]; do
        if [ $PWD = "/" ]; then
            echo "Unable to find syncd configuration file \"$CONF_FILE\". Run with \`help\` for more information."
            exit 1
        else
            cd ..
        fi
    done
    . $CONF_FILE
}

SYNCD_CONFIG_DIR=$PWD
if [ -L $0 ]; then
    SCRIPT=$(readlink -f $0)
else
    SCRIPT=$(realpath $0)
fi
DAEMON_NAME=syncd
LINK=$SCRIPT
SCRIPT_DIR=$(dirname $LINK)


COMMAND="rsync $RSYNC_OPTIONS --exclude=$RSYNC_EXCLUDE --delete $WATCH_DIR/ $SSH_USER@$SSH_HOST:$REMOTE_TARGET_DIR"

case $1 in
    start)
      verify_config_file_present
      if [ -e ${PIDFILE} ] && ( ps -p `cat $PIDFILE` > /dev/null ); then
        echo "$DAEMON_NAME is already running."
        exit 1;
      fi
      export WATCH_EXCLUDE
      export WATCH_VERBOSE
      export WATCH_DIR
      $SCRIPT_DIR/watch.sh eval $COMMAND >> $LOGFILE &
      echo "$!" > $PIDFILE
      echo "Starting $DAEMON_NAME..."
    ;;

    stop)
      verify_config_file_present
      if [ ! -e ${PIDFILE} ] || ( ! ps -p `cat $PIDFILE` > /dev/null ); then
        echo "$DAEMON_NAME is not running."
        exit 1;
      fi

      echo "Stopping $DAEMON_NAME..."
      PID=`cat $PIDFILE`
      CHILD_PIDS=$(pgrep -P $PID);
      kill $PID 2> /dev/null || echo Killing process failed, not running?
      # Wait half a second and Kill child PIDs to be sure they are gone.
      sleep 0.5
      kill $CHILD_PIDS 2> /dev/null
      rm $PIDFILE
    ;;
    restart)
      verify_config_file_present
      $SCRIPT stop
      $SCRIPT start
    ;;

    status)
      verify_config_file_present
      if [ -e ${PIDFILE} ] && ( ps -p `cat $PIDFILE` > /dev/null ); then
          echo "$DAEMON_NAME is running."
      else
          echo "$DAEMON_NAME is not running."
      fi
    ;;

    show-run-command)
      echo $COMMAND
    ;;

    run)
      verify_config_file_present
      eval $COMMAND && echo Done.
    ;;

    log)
      verify_config_file_present
      tail -f $LOGFILE
    ;;

    help)
      usage
    ;;

    sample_config)
      sample_config
    ;;

    *)
      error_exit
    ;;
esac
